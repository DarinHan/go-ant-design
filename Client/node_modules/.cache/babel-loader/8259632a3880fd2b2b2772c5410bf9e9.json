{"ast":null,"code":"var _jsxFileName = \"D:\\\\SourceCode\\\\DirSearch\\\\antd-demo\\\\src\\\\DirTree.js\";\nimport { Tree } from 'antd';\nimport React from 'react';\nconst DirectoryTree = Tree.DirectoryTree;\nconst TreeNode = Tree.TreeNode;\n\nclass DirTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSelect = (keys, event) => {\n      console.log('Trigger Select', keys, event);\n    };\n\n    this.onExpand = () => {\n      console.log('Trigger Expand');\n    };\n\n    this.getsizedesc = function (totalsize) {\n      if (totalsize < 1024) {\n        return \"\" + totalsize + \"B\";\n      }\n\n      if (totalsize < 1024 * 1024) {\n        return \"\" + totalsize / 1024 + \"KB\";\n      }\n\n      if (totalsize < 1024 * 1024 * 1024) {\n        return \"\" + totalsize / 1024 / 1024 + \"MB\";\n      }\n\n      if (totalsize < 1024 * 1024 * 1024 * 1024) {\n        return \"\" + totalsize / 1024 / 1024 / 1024 + \"GB\";\n      }\n\n      return totalsize, \"\";\n    };\n\n    this.rendersubfiles = function (subfile) {\n      if (subfile.SubFiles == null) {\n        return React.createElement(TreeNode, {\n          title: subfile.Name + \"     \" + subfile.TotalSize,\n          key: subfile.Name,\n          isLeaf: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        });\n      } else {\n        let subfilecontent = subfile.SubFiles.map((item, index) => {\n          return this.rendersubfiles(item);\n        });\n        return React.createElement(TreeNode, {\n          title: subfile.Name + \"     \" + subfile.TotalSize,\n          key: subfile.Name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, subfilecontent);\n      }\n    };\n\n    var url = 'http://localhost:9898/dir?root=D:\\\\Tools';\n    fetch(url, {\n      mode: 'cors'\n    }).then(res => {\n      console.log('res' + res);\n      var t = this;\n      res.json().then(function (data) {\n        console.log(data);\n        t.setState({\n          dirinfo: data\n        });\n      });\n    });\n  }\n\n  render() {\n    if (this.state == null) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      });\n    }\n\n    let content = this.rendersubfiles(this.state.dirinfo);\n    return React.createElement(DirectoryTree, {\n      multiple: true,\n      defaultExpandAll: true,\n      onSelect: this.onSelect,\n      onExpand: this.onExpand,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default DirTree;","map":{"version":3,"sources":["D:\\SourceCode\\DirSearch\\antd-demo\\src\\DirTree.js"],"names":["Tree","React","DirectoryTree","TreeNode","DirTree","Component","constructor","props","onSelect","keys","event","console","log","onExpand","getsizedesc","totalsize","rendersubfiles","subfile","SubFiles","Name","TotalSize","subfilecontent","map","item","index","url","fetch","mode","then","res","t","json","data","setState","dirinfo","render","state","content"],"mappings":"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","sourcesContent":["import { Tree } from 'antd';\r\nimport React from 'react';\r\n\r\nconst DirectoryTree = Tree.DirectoryTree;\r\nconst { TreeNode } = Tree;\r\n\r\nclass DirTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var url = 'http://localhost:9898/dir?root=D:\\\\Tools';\r\n        fetch(url, { mode: 'cors' }).then(res => {\r\n            console.log('res' + res);\r\n            var t = this;\r\n            res.json().then(function (data) {\r\n                console.log(data);\r\n                t.setState({\r\n                    dirinfo: data\r\n                })\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n\r\n    onSelect = (keys, event) => {\r\n        console.log('Trigger Select', keys, event);\r\n    };\r\n\r\n    onExpand = () => {\r\n        console.log('Trigger Expand');\r\n    };\r\n\r\n    getsizedesc=function(totalsize){\r\n        if (totalsize < 1024) {\r\n            return \"\"+totalsize+\"B\"\r\n        }\r\n    \r\n        if (totalsize < 1024*1024) {\r\n            return \"\"+(totalsize / 1024)+ \"KB\"\r\n        }\r\n    \r\n        if (totalsize < 1024*1024*1024) {\r\n            return \"\"+(totalsize / 1024/ 1024)+ \"MB\"\r\n        }\r\n    \r\n        if (totalsize < 1024*1024*1024*1024) {\r\n            return  \"\"+(totalsize / 1024/ 1024/ 1024)+ \"GB\"\r\n        }\r\n        return totalsize, \"\"\r\n    }\r\n\r\n    rendersubfiles = function (subfile) {\r\n        if (subfile.SubFiles == null) {\r\n            return (<TreeNode title={subfile.Name+\"     \"+subfile.TotalSize} key={subfile.Name} isLeaf />);\r\n        } else {\r\n            let subfilecontent = subfile.SubFiles.map((item, index) => {\r\n               return(this.rendersubfiles(item));\r\n            });\r\n            return (<TreeNode title={subfile.Name+\"     \"+subfile.TotalSize} key={subfile.Name}>\r\n                {subfilecontent}\r\n            </TreeNode>)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state == null) {\r\n            return (<div></div>);\r\n        }\r\n        let content = this.rendersubfiles(this.state.dirinfo)\r\n        return (\r\n            <DirectoryTree\r\n                multiple\r\n                defaultExpandAll\r\n                onSelect={this.onSelect}\r\n                onExpand={this.onExpand}\r\n            >\r\n                {content}\r\n            </DirectoryTree>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DirTree;"]},"metadata":{},"sourceType":"module"}