{"ast":null,"code":"var _jsxFileName = \"D:\\\\SourceCode\\\\DirSearch\\\\antd-demo\\\\src\\\\TreeItem.js\";\nimport React from 'react';\nimport './TreeItem.css';\n\nclass TreeItem extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getsizedesc = function (totalsize) {\n      if (totalsize < 1024) {\n        return \"\" + totalsize + \"B\";\n      }\n\n      if (totalsize < 1024 * 1024) {\n        return \"\" + (totalsize / 1024).toFixed(2) + \"KB\";\n      }\n\n      if (totalsize < 1024 * 1024 * 1024) {\n        return \"\" + (totalsize / 1024 / 1024).toFixed(2) + \"MB\";\n      }\n\n      if (totalsize < 1024 * 1024 * 1024 * 1024) {\n        return \"\" + (totalsize / 1024 / 1024 / 1024).toFixed(2) + \"GB\";\n      }\n\n      return \"\" + totalsize;\n    };\n  }\n\n  render() {\n    let content = undefined;\n    var totalsize = this.props.TotalSize;\n\n    if (totalsize < 1024) {\n      content = React.createElement(\"div\", {\n        className: \"treeitem size-gb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"itemname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.props.Name), React.createElement(\"div\", {\n        className: \"itemsize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"\" + totalsize + \"B\"));\n    }\n\n    if (totalsize < 1024 * 1024) {\n      content = React.createElement(\"div\", {\n        className: \"treeitem size-gb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"itemname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, this.props.Name), React.createElement(\"div\", {\n        className: \"itemsize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"\" + (totalsize / 1024).toFixed(2) + \"KB\"));\n    }\n\n    if (totalsize < 1024 * 1024 * 1024) {\n      content = React.createElement(\"div\", {\n        className: \"treeitem size-gb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"itemname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, this.props.Name), React.createElement(\"div\", {\n        className: \"itemsize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"\" + (totalsize / 1024 / 1024).toFixed(2) + \"MB\"));\n    }\n\n    if (totalsize < 1024 * 1024 * 1024 * 1024) {\n      content = React.createElement(\"div\", {\n        className: \"treeitem size-gb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"itemname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, this.props.Name), React.createElement(\"div\", {\n        className: \"itemsize\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"\" + (totalsize / 1024 / 1024 / 1024).toFixed(2) + \"GB\"));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default TreeItem;","map":{"version":3,"sources":["D:\\SourceCode\\DirSearch\\antd-demo\\src\\TreeItem.js"],"names":["React","TreeItem","Component","getsizedesc","totalsize","toFixed","render","content","undefined","props","TotalSize","Name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './TreeItem.css';\r\n\r\nclass TreeItem extends React.Component {\r\n    getsizedesc = function (totalsize) {\r\n        if (totalsize < 1024) {\r\n            return \"\" + totalsize + \"B\"\r\n        }\r\n\r\n        if (totalsize < 1024 * 1024) {\r\n            return \"\" + (totalsize / 1024).toFixed(2) + \"KB\"\r\n        }\r\n\r\n        if (totalsize < 1024 * 1024 * 1024) {\r\n            return \"\" + (totalsize / 1024 / 1024).toFixed(2) + \"MB\"\r\n        }\r\n\r\n        if (totalsize < 1024 * 1024 * 1024 * 1024) {\r\n            return \"\" + (totalsize / 1024 / 1024 / 1024).toFixed(2) + \"GB\"\r\n        }\r\n        return \"\" + totalsize\r\n    }\r\n    render() {\r\n        let content = undefined;\r\n        var totalsize = this.props.TotalSize;\r\n        if (totalsize < 1024) {\r\n            content = <div className=\"treeitem size-gb\" >\r\n                <div className=\"itemname\">{this.props.Name}</div>\r\n                <div className=\"itemsize\">{\"\" + totalsize + \"B\"}</div>\r\n            </div >\r\n        }\r\n\r\n        if (totalsize < 1024 * 1024) {\r\n            content = <div className=\"treeitem size-gb\" >\r\n                <div className=\"itemname\">{this.props.Name}</div>\r\n                <div className=\"itemsize\">{\"\" + (totalsize / 1024).toFixed(2) + \"KB\"}</div>\r\n            </div >\r\n        }\r\n\r\n        if (totalsize < 1024 * 1024 * 1024) {\r\n            content = <div className=\"treeitem size-gb\" >\r\n                <div className=\"itemname\">{this.props.Name}</div>\r\n                <div className=\"itemsize\">{\"\" + (totalsize / 1024 / 1024).toFixed(2) + \"MB\"}</div>\r\n            </div >\r\n        }\r\n\r\n        if (totalsize < 1024 * 1024 * 1024 * 1024) {\r\n            content = <div className=\"treeitem size-gb\" >\r\n                <div className=\"itemname\">{this.props.Name}</div>\r\n                <div className=\"itemsize\">{\"\" + (totalsize / 1024 / 1024 / 1024).toFixed(2) + \"GB\"}</div>\r\n            </div >\r\n        }\r\n\r\n        return (\r\n            <div>{content}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeItem;"]},"metadata":{},"sourceType":"module"}