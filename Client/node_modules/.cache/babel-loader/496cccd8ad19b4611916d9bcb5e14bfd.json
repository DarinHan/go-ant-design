{"ast":null,"code":"var _jsxFileName = \"D:\\\\SourceCode\\\\DirSearch\\\\antd-demo\\\\src\\\\DirTree.js\";\nimport { Tree } from 'antd';\nimport React from 'react';\nimport TreeItem from './TreeItem';\nconst DirectoryTree = Tree.DirectoryTree;\nconst TreeNode = Tree.TreeNode;\n\nclass DirTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onLoadData = treeNode => new Promise(resolve => {\n      if (treeNode.props.children) {\n        resolve();\n        return;\n      }\n\n      setTimeout(() => {\n        treeNode.props.dataRef.children = [{\n          title: 'Child Node',\n          key: \"\".concat(treeNode.props.eventKey, \"-0\")\n        }, {\n          title: 'Child Node',\n          key: \"\".concat(treeNode.props.eventKey, \"-1\")\n        }];\n        this.setState({\n          treeData: [...this.state.treeData]\n        });\n        resolve();\n      }, 1000);\n    });\n\n    this.onSelect = (keys, event) => {\n      console.log('Trigger Select', keys, event);\n    };\n\n    this.onExpand = () => {\n      console.log('Trigger Expand');\n    };\n\n    this.rendersubfiles = function (subfile) {\n      if (subfile.SubFiles == null) {\n        return React.createElement(TreeNode, {\n          title: React.createElement(TreeItem, {\n            Name: subfile.Name,\n            TotalSize: subfile.TotalSize,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }),\n          key: subfile.Name,\n          isLeaf: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n      } else {\n        let subfilecontent = subfile.SubFiles.map((item, index) => {\n          return this.rendersubfiles(item);\n        });\n        return React.createElement(TreeNode, {\n          title: React.createElement(TreeItem, {\n            Name: subfile.Name,\n            TotalSize: subfile.TotalSize,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }),\n          key: subfile.Name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, subfilecontent);\n      }\n    };\n  }\n\n  render() {\n    if (this.state == null) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    }\n\n    var url = this.state.url;\n\n    if (url != undefined) {\n      fetch(url, {\n        mode: 'cors'\n      }).then(res => {\n        console.log('res' + res);\n        var t = this;\n        res.json().then(function (data) {\n          console.log(data);\n          t.setState({\n            dirinfo: data\n          });\n        });\n      });\n    }\n\n    let content = this.rendersubfiles(this.state.dirinfo);\n    return React.createElement(DirectoryTree, {\n      multiple: true,\n      onSelect: this.onSelect,\n      onExpand: this.onExpand,\n      loadData: this.onLoadData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default DirTree;","map":{"version":3,"sources":["D:\\SourceCode\\DirSearch\\antd-demo\\src\\DirTree.js"],"names":["Tree","React","TreeItem","DirectoryTree","TreeNode","DirTree","Component","constructor","props","onLoadData","treeNode","Promise","resolve","children","setTimeout","dataRef","title","key","eventKey","setState","treeData","state","onSelect","keys","event","console","log","onExpand","rendersubfiles","subfile","SubFiles","Name","TotalSize","subfilecontent","map","item","index","render","url","undefined","fetch","mode","then","res","t","json","data","dirinfo","content"],"mappings":"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","sourcesContent":["import { Tree } from 'antd';\r\nimport React from 'react';\r\nimport TreeItem from './TreeItem'\r\n\r\nconst DirectoryTree = Tree.DirectoryTree;\r\nconst { TreeNode } = Tree;\r\n\r\nclass DirTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    onLoadData =treeNode =>new  Promise((resolve) => {\r\n        if (treeNode.props.children) {\r\n          resolve();\r\n          return;\r\n        }\r\n        setTimeout(() => {\r\n          treeNode.props.dataRef.children = [\r\n            { title: 'Child Node', key: `${treeNode.props.eventKey}-0` },\r\n            { title: 'Child Node', key: `${treeNode.props.eventKey}-1` },\r\n          ];\r\n          this.setState({\r\n            treeData: [...this.state.treeData],\r\n          });\r\n          resolve();\r\n        }, 1000);\r\n      })\r\n\r\n    onSelect = (keys, event) => {\r\n        console.log('Trigger Select', keys, event);\r\n    };\r\n\r\n    onExpand = () => {\r\n        console.log('Trigger Expand');\r\n    };\r\n\r\n    \r\n\r\n    rendersubfiles = function (subfile) {\r\n        if (subfile.SubFiles == null) {\r\n        return (<TreeNode title={<TreeItem Name={subfile.Name} TotalSize={subfile.TotalSize}></TreeItem>} key={subfile.Name} isLeaf />);\r\n        } else {\r\n            let subfilecontent = subfile.SubFiles.map((item, index) => {\r\n               return(this.rendersubfiles(item));\r\n            });\r\n            return (<TreeNode title={<TreeItem Name={subfile.Name} TotalSize={subfile.TotalSize}></TreeItem>} key={subfile.Name} >\r\n                {subfilecontent}\r\n            </TreeNode>)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state == null) {\r\n            return (<div></div>);\r\n        }\r\n        var url = this.state.url;\r\n        if(url!=undefined){\r\n            fetch(url, { mode: 'cors' }).then(res => {\r\n                console.log('res' + res);\r\n                var t = this;\r\n                res.json().then(function (data) {\r\n                    console.log(data);\r\n                    t.setState({\r\n                        dirinfo: data\r\n                    })\r\n                });\r\n            })\r\n        }\r\n        let content = this.rendersubfiles(this.state.dirinfo)\r\n        return (\r\n            <DirectoryTree\r\n                multiple\r\n                onSelect={this.onSelect}\r\n                onExpand={this.onExpand}\r\n                loadData = {this.onLoadData}\r\n            >\r\n                {content}\r\n            </DirectoryTree>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DirTree;"]},"metadata":{},"sourceType":"module"}