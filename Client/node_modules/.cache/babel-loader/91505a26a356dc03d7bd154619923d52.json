{"ast":null,"code":"var _jsxFileName = \"D:\\\\SourceCode\\\\DirSearch\\\\antd-demo\\\\src\\\\DirTree.js\";\nimport { Tree } from 'antd';\nimport React from 'react';\nimport TreeItem from './TreeItem';\nconst DirectoryTree = Tree.DirectoryTree;\nconst TreeNode = Tree.TreeNode;\n\nclass DirTree extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onLoadData = treeNode => new Promise(resolve => {\n      var url = this.state.url;\n\n      if (url != undefined) {\n        fetch(url, {\n          mode: 'cors'\n        }).then(res => {\n          console.log('res' + res);\n          var t = this;\n          res.json().then(function (data) {\n            console.log(data);\n            t.setState({\n              dirinfo: data\n            });\n          });\n        });\n      }\n    });\n\n    this.onSelect = (keys, event) => {\n      console.log('Trigger Select', keys, event);\n    };\n\n    this.onExpand = () => {\n      console.log('Trigger Expand');\n    };\n\n    this.rendersubfiles = function (subfile) {\n      if (subfile.SubFiles == null) {\n        return React.createElement(TreeNode, {\n          title: React.createElement(TreeItem, {\n            Name: subfile.Name,\n            TotalSize: subfile.TotalSize,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          }),\n          key: subfile.Name,\n          isLeaf: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      } else {\n        let subfilecontent = subfile.SubFiles.map((item, index) => {\n          return this.rendersubfiles(item);\n        });\n        return React.createElement(TreeNode, {\n          title: React.createElement(TreeItem, {\n            Name: subfile.Name,\n            TotalSize: subfile.TotalSize,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }),\n          key: subfile.Name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, subfilecontent);\n      }\n    };\n  }\n\n  render() {\n    if (this.state == null) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    }\n\n    let content = this.rendersubfiles(this.state.dirinfo);\n    return React.createElement(DirectoryTree, {\n      multiple: true,\n      onSelect: this.onSelect,\n      onExpand: this.onExpand,\n      loadData: this.onLoadData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default DirTree;","map":{"version":3,"sources":["D:\\SourceCode\\DirSearch\\antd-demo\\src\\DirTree.js"],"names":["Tree","React","TreeItem","DirectoryTree","TreeNode","DirTree","Component","constructor","props","onLoadData","treeNode","Promise","resolve","url","state","undefined","fetch","mode","then","res","console","log","t","json","data","setState","dirinfo","onSelect","keys","event","onExpand","rendersubfiles","subfile","SubFiles","Name","TotalSize","subfilecontent","map","item","index","render","content"],"mappings":"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","sourcesContent":["import { Tree } from 'antd';\r\nimport React from 'react';\r\nimport TreeItem from './TreeItem'\r\n\r\nconst DirectoryTree = Tree.DirectoryTree;\r\nconst { TreeNode } = Tree;\r\n\r\nclass DirTree extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    onLoadData =treeNode =>new  Promise((resolve) => {\r\n        var url = this.state.url;\r\n        if(url!=undefined){\r\n            fetch(url, { mode: 'cors' }).then(res => {\r\n                console.log('res' + res);\r\n                var t = this;\r\n                res.json().then(function (data) {\r\n                    console.log(data);\r\n                    t.setState({\r\n                        dirinfo: data\r\n                    })\r\n                });\r\n            })\r\n        }\r\n      })\r\n\r\n    onSelect = (keys, event) => {\r\n        console.log('Trigger Select', keys, event);\r\n    };\r\n\r\n    onExpand = () => {\r\n        console.log('Trigger Expand');\r\n    };\r\n\r\n    \r\n\r\n    rendersubfiles = function (subfile) {\r\n        if (subfile.SubFiles == null) {\r\n        return (<TreeNode title={<TreeItem Name={subfile.Name} TotalSize={subfile.TotalSize}></TreeItem>} key={subfile.Name} isLeaf />);\r\n        } else {\r\n            let subfilecontent = subfile.SubFiles.map((item, index) => {\r\n               return(this.rendersubfiles(item));\r\n            });\r\n            return (<TreeNode title={<TreeItem Name={subfile.Name} TotalSize={subfile.TotalSize}></TreeItem>} key={subfile.Name} >\r\n                {subfilecontent}\r\n            </TreeNode>)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state == null) {\r\n            return (<div></div>);\r\n        }\r\n        \r\n        let content = this.rendersubfiles(this.state.dirinfo)\r\n        return (\r\n            <DirectoryTree\r\n                multiple\r\n                onSelect={this.onSelect}\r\n                onExpand={this.onExpand}\r\n                loadData = {this.onLoadData}\r\n            >\r\n                {content}\r\n            </DirectoryTree>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DirTree;"]},"metadata":{},"sourceType":"module"}